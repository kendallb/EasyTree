/*!
 * jQuery EasyTree Plugin
 * http://www.EasyJsTree.com
 *
 * Copyright 2014 Matthew Rand
 * Released under the MIT license
 * V1.0.1
 */

(function (e) { e.fn.easytree = function (e) { var n = this; var r = new t(n, e); return r }; var t = function (t, n) { function u(t) { var n = g(this); var i = t.data; var s = y(i, n); if (!s) { return } S(i); if (!r.allowActivate) { return } s.isActive = true; e("#" + s.id).addClass("easytree-active"); if (r.stateChanged) { var o = B(i); r.stateChanged(i, o) } } function a(e) { var t = g(this); var n = e.data; var r = y(n, t); if (!r) { return } f(e, n, r) } function f(t, n, i) { var s = ""; if (r.toggling) { s = r.toggling(t, n, i); if (s === false) { return false } } if (i.isExpanded) { if (r.closing) { s = r.closing(t, n, i); if (s === false) { return false } } } else { if (r.opening) { s = r.opening(t, n, i); if (s === false) { return false } } } if (i.isLazy && !i.isExpanded) { var o = i.children && i.children.length > 0; s = true; if (r.openLazyNode) { s = r.openLazyNode(t, n, i, o) } if (i.lazyUrl && s !== false) { I(i.lazyUrl, i.lazyUrlJson, function (r) { if (r.d) { r = r.d } var s = q(r); if (e.isArray(s)) { i.children = s } else { i.children = []; i.children.push(s) } C(n); l(t, n, i) }); return false } } l(t, n, i) } function l(e, t, n) { if (n.isExpanded) { E(t, n.id, "close"); _(n, "close"); if (r.closed) { r.closed(e, t, n) } } else { E(t, n.id, "open"); _(n, "open"); if (r.opened) { r.opened(e, t, n) } } if (r.toggled) { var i = r.toggled(e, t, n) } } function c(t) { if (!r.enableDnd) { return } var n = t.target; while (n) { if (n.className.indexOf("easytree-draggable") > -1) { break } n = n.parentElement } if (!n) { return } x(s); S(s); e("#" + n.id).addClass("easytree-drag-source"); m(o); o.createClone = !(n.className.indexOf("easytree-no-clone") > -1); o.dragok = true; o.sourceEl = n; o.sourceId = n.id; o.sourceNode = y(s, o.sourceId); return false } function h(t) { if (!o.dragok) { return } if (!r.enableDnd) { return } if (o.createClone) { if (!o.clone) { o.clone = d(o.sourceEl); e(o.clone).appendTo("body") } o.clone.style.left = t.pageX + 5 + "px"; o.clone.style.top = t.pageY + "px" } var n = v(t.clientX, t.clientY); if (!n) { D(); o.targetEl = null; o.targetId = null; o.targetNode = null; o.canDrop = false; return } if (n.id == o.targetId) { return } o.canDrop = false; window.clearTimeout(o.openDelayTimeout); o.targetEl = n; o.targetId = n.id; o.targetNode = y(s, o.targetId); W("source:" + (o.sourceNode && o.sourceNode.text ? o.sourceNode.text : o.sourceId)); W("target:" + (o.targetNode && o.targetNode.text ? o.targetNode.text : o.targetId)); W("isAncester:" + b(o.sourceNode, o.targetId)); var i = e("#" + o.targetId); if (b(o.sourceNode, o.targetId)) { H(); return } if (o.targetId == o.sourceId) { D(); return } if (r.canDrop) { var u = o.sourceNode != null; var a = u ? o.sourceNode : o.sourceEl; var f = o.targetNode != null; var l = f ? o.targetNode : o.targetEl; var c = r.canDrop(t, s, u, a, f, l); if (c === true) { P(); o.canDrop = true; o.openDelayTimeout = window.setTimeout(function () { E(s, o.targetId, "open"); _(o.targetNode, "open") }, 600); return } else if (c === false) { H(); return } } if (i.hasClass("easytree-reject")) { H() } else if (i.hasClass("easytree-accept")) { P(); o.canDrop = true; o.openDelayTimeout = window.setTimeout(function () { E(s, o.targetId, "open"); _(o.targetNode, "open") }, 600) } else { D() } return false } function p(t) { var n = o.sourceNode != null; var i = n ? o.sourceNode : o.sourceEl; var u = o.targetNode != null; var a = u ? o.targetNode : o.targetEl; var f = o.canDrop; D(); e("#_st_clone_").remove(); if (i === null || a === null) { m(o); return false } if (r.dropping) { var l = r.dropping(t, s, n, i, u, a, f); if (l === false) { m(o); return } } if (o.targetNode && o.sourceNode && f) { if (!o.targetNode.children) { o.targetNode.children = [] } w(s, o.sourceId); o.targetNode.children.push(o.sourceNode) } if (f) { if (r.dropped) { r.dropped(t, s, n, i, u, a) } C(s) } m(o); return false } function d(t) { e(t).remove(".easytree-expander"); var n = e(t).clone().remove(".easytree-expander").removeClass("easytree-drag-source")[0]; var r = n.children[0]; if (r && r.className == "easytree-expander") { n.removeChild(r) } n.style.display = "block"; n.style.position = "absolute"; n.style.opacity = .5; n.id = "_st_clone_"; n.style.zIndex = 1e3; return n } function v(e, t) { var n = document.elementFromPoint(e, t); while (n) { if (n.className.indexOf("easytree-droppable") > -1) { return n } n = n.parentElement } return null } function m(e) { e.canDrop = false; e.createClone = true; e.clone = null; e.dragok = false; e.openDelayTimeout = null; e.targetEl = null; e.targetId = null; e.targetNode = null; e.sourceEl = null; e.sourceId = null; e.sourceNode = null } function g(e) { while (e != null) { if (e.id) { return e.id } e = e.parentElement } return null } function y(e, t) { var n = 0; for (n = 0; n < e.length; n++) { var r = e[n]; var i = r.text; if (r.id == t) { return r } var s = r.children && r.children.length > 0; if (s) { var o = y(r.children, t); if (o) { return o } } } return null } function b(e, t) { var n = 0; if (!e || !e.children || e.children.length == 0) { return false } for (n = 0; n < e.children.length; n++) { var r = e.children[n]; var i = r.text; if (r.id == t) { return true } var s = r.children && r.children.length > 0; if (s) { var o = b(r, t); if (o) { return o } } } return false } function w(e, t) { var n = 0; for (n = 0; n < e.length; n++) { var r = e[n]; var i = r.text; if (r.id == t) { e.splice(n, 1); return } var s = r.children && r.children.length > 0; if (s) { w(r.children, t) } } } function E(e, t, n) { var r = 0; for (r = 0; r < e.length; r++) { var i = e[r]; var s = i.text; if (i.id == t) { i.isExpanded = n == "open"; return } var o = i.children && i.children.length > 0; if (o) { E(i.children, t, n) } } } function S(t) { var n = 0; for (n = 0; n < t.length; n++) { var r = t[n]; r.isActive = false; e("#" + r.id).removeClass("easytree-active"); var i = r.children && r.children.length > 0; if (i) { S(r.children) } } } function x(t) { var n = 0; for (n = 0; n < t.length; n++) { var r = t[n]; e("#" + r.id).removeClass("easytree-drag-source"); var i = r.children && r.children.length > 0; if (i) { x(r.children) } } } function T(e) { var t = 0; e = e.sort(function (e, t) { var n = e.text.toLowerCase(); var i = t.text.toLowerCase(); if (!n) { n = "a" } if (!i) { i = "a" } if (r.ordering.toLowerCase().indexOf("folder") > -1 && e.isFolder) { n = "______" + n } if (r.ordering.toLowerCase().indexOf("folder") > -1 && t.isFolder) { i = "______" + i } var s = r.ordering.indexOf(" DESC") == -1 ? 1 : -1; if (n < i) { return -1 * s } if (n > i) { return 1 * s } return 0 }); for (t = 0; t < e.length; t++) { var n = e[t]; var i = n.children && n.children.length > 0; if (i) { T(n.children) } } return e } function N(e, t, n) { var r = 0; if (!t) { t = 0; n = "_st_node_" + n + "_" } for (r = 0; r < e.length; r++) { var i = e[r]; if (!i.id) { i.id = n + r.toString() } var s = i.children && i.children.length > 0; if (s) { N(i.children, t + 1, n + r + "_") } } } function C(t) { if (!t) { return } var n = new Date; if (r.building) { var o = r.building(t); if (o === false) { return false } } var f = new Date; if (r.ordering) { t = T(t) } var l = new Date; var d = Math.floor(Math.random() * 1e4); N(t, 0, d); var v = new Date; s = t; var m = k(t, 0, true); var g = new Date; i[0].innerHTML = m; var y = new Date; e(i.selector + " .easytree-node").on("click", t, u); e(i.selector + " .easytree-expander").on("click", t, a); e(i.selector + " .easytree-icon").on("dblclick", t, a); e(i.selector + " .easytree-title").on("dblclick", t, a); var b = new Date; if (r.enableDnd) { e(document).on("mousedown", c); e(document).on("mousemove", h); e(document).on("mouseup", p) } var w = new Date; if (r.built) { r.built(t) } var E = new Date; if (r.stateChanged) { var S = B(t); r.stateChanged(t, S) } var x = new Date; var C = f - n; var L = l - f; var A = v - l; var O = g - v; var M = y - g; var _ = b - y; var D = w - b; var P = E - w; var H = x - E; var j = x - n } function k(e, t, n) { var i = ""; var s = 0; var o = ""; if (t == 0) { o += "ui-easytree easytree-container easytree-focused" } var u = t < r.minOpenLevels; var a = t == 0 || n || u ? "" : " style='display:none' "; i += '<ul tabindex="0" class="' + o + '" ' + a + '">'; for (s = 0; s < e.length; s++) { var f = e[s]; if (u === true) { f.isExpanded = true } var l = s == e.length - 1; var c = L(f, l); i += "<li>"; i += '<span id="' + f.id + '" class="' + c + ' ">'; i += u ? "" : '<span class="easytree-expander"></span>'; i += O(f); i += M(f); i += "</span>"; if (f.children && f.children.length > 0) { i += k(f.children, t + 1, f.isExpanded) } i += "</li>" } i += "</ul>"; return i } function L(e, t) { var n = e.children && e.children.length > 0; var i = "easytree-node "; if (r.enableDnd) { i += " easytree-draggable " } if (e.liClass) { i += e.liClass } if (e.isFolder && r.enableDnd) { i += " easytree-droppable easytree-accept " } else if (r.enableDnd) { i += " easytree-droppable easytree-reject " } if (e.isActive && r.allowActivate) { i += " easytree-active " } i += A(e, t); var s = e.isExpanded ? "e" : "c"; if (e.isFolder) { s += "f" } i += " easytree-ico-" + s; return i } function A(e, t) { var n = e.children && e.children.length > 0; var r = ""; if (!n && e.isLazy) { r = "c" } else if (!n) { r = "n" } else if (e.isExpanded) { r = "e" } else { r = "c" } if (t) { r += "l" } return " easytree-exp-" + r } function O(e) { var t = ""; if (r.disableIcons) { return t } if (e.uiIcon) { return '<span class="easytree-custom-icon ui-icon ' + e.uiIcon + '"></span>' } if (e.iconUrl) { return '<span><img src="' + e.iconUrl + '" /></span>' } return '<span class="easytree-icon"></span>' } function M(e) { var t = ""; var n = e.tooltip ? 'title="' + e.tooltip + '"' : ""; var r = "easytree-title"; if (e.textCss) { r += " " + e.textCss } t += "<span " + n + ' class="' + r + '">'; if (e.href) { t += '<a href="' + e.href + '" '; if (e.hrefTarget) { t += ' target="' + e.hrefTarget + '" ' } t += ">" } t += e.text; if (e.href) { t += "</a>" } t += "</span>"; return t } function _(t, n) { if (!t) { return } var i = e("#" + t.id).attr("class"); var s = i.indexOf("easytree-exp-"); if (s > -1) { var o = i.indexOf(" ", s); var u = o > -1 ? i.substring(s, o) : i.substring(s); e("#" + t.id).removeClass(u); e("#" + t.id).addClass(A(t, false)) } var a = e("#" + t.id).parents("li").first(); var f = a.children("ul").first(); var l = parseInt(r.slidingTime, 10); if (n == "close") { f.slideUp(l) } else { f.slideDown(l) } } function D() { e("#easytree-reject").hide(); e("#easytree-accept").hide() } function P() { e("#easytree-accept").show(); e("#easytree-reject").hide() } function H() { e("#easytree-reject").show(); e("#easytree-accept").hide() } function B(e) { var t = JSON.stringify ? JSON.stringify(e) : "Please import json2.js"; while (t.indexOf(',"children":[]') > -1) { t = t.replace(',"children":[]', "") } while (t.indexOf('"liClass":"",') > -1) { t = t.replace('"liClass":"",', "") } while (t.indexOf('"textCss":"",') > -1) { t = t.replace('"textCss":"",', "") } while (t.indexOf('"isExpanded":false,') > -1) { t = t.replace('"isExpanded":false,', "") } while (t.indexOf('"isActive":false,') > -1) { t = t.replace('"isActive":false,', "") } while (t.indexOf('"isFolder":false,') > -1) { t = t.replace('"isFolder":false,', "") } while (t.indexOf('"isLazy":false,') > -1) { t = t.replace('"isLazy":false,', "") } return t } function j() { F(); m(o); e(document).on("mousemove", function (e) { var t = e.pageY; var n = e.pageX; document.getElementById("easytree-reject").style.top = t + 10 + "px"; document.getElementById("easytree-reject").style.left = n + 17 + "px"; document.getElementById("easytree-accept").style.top = t + 10 + "px"; document.getElementById("easytree-accept").style.left = n + 17 + "px" }) } function F() { if (!e("#easytree-reject").length) { var t = '<div id="easytree-reject" class="easytree-drag-helper easytree-drop-reject">'; t += '<span class="easytree-drag-helper-img"></span>'; t += "</div>"; e("body").append(t) } if (!e("#easytree-accept").length) { var n = '<div id="easytree-accept" class="easytree-drag-helper easytree-drop-accept">'; n += '<span class="easytree-drag-helper-img"></span>'; n += "</div>"; e("body").append(n) } } function I(t, n, r) { e.ajax({ url: t, type: n == null ? "GET" : "POST", contentType: "application/json; charset=utf-8", data: n, success: r, error: function (e, t, n) { if (e.responseText != "") { alert("Error: " + e.responseText) } } }) } function q(t) { var n = null; if (typeof t == "object") { n = t } else if (typeof t == "string") { t = e.trim(t); if (t.indexOf("[") == 0 || t.indexOf("{") == 0) { n = e.parseJSON(t) } else { n = R(t) } } return n } function R(t) { var n = 0; var r = e(t); var i = []; var s = r.children().each(function (e) { i.push(U(this)) }); return i } function U(t) { var n = e(t); var r = {}; var i = n.data(); r.isActive = n.hasClass("isActive"); n.removeClass("isActive"); r.isFolder = n.hasClass("isFolder"); n.removeClass("isFolder"); r.isExpanded = n.hasClass("isExpanded"); n.removeClass("isExpanded"); r.isLazy = n.hasClass("isLazy"); n.removeClass("isLazy"); r.uiIcon = i.uiicon; r.liClass = n.attr("class"); r.id = n.attr("id"); var s = n.children("a"); if (s) { r.href = s.attr("href"); r.hrefTarget = s.attr("target") } var o = n.children("img"); if (o) { r.iconUrl = o.attr("src") } r.textCss = ""; var u = n.children("span"); if (u && u.attr("class")) { r.textCss += u.attr("class") + " " } u = s.children("span"); if (u && u.attr("class")) { r.textCss += u.attr("class") + " " } u = o.children("span"); if (u && u.attr("class")) { r.textCss += u.attr("class") + " " } r.text = z(n[0]); r.tooltip = n.attr("title"); r.children = []; var a = n.children("ul").children("li").each(function (e) { r.children.push(U(this)) }); return r } function z(t) { var n = 0; for (n = 0; n < t.childNodes.length; n++) { var r = t.childNodes[n]; while (r) { if (r.nodeType == 3 && e.trim(r.nodeValue).length > 0) { return e.trim(r.nodeValue) } r = r.firstChild } } return "" } function W(e) { if (!e) { e = "null" } console.log(e) } var r = { allowActivate: true, data: null, dataUrl: null, dataUrlJson: null, disableIcons: false, enableDnd: false, ordering: null, slidingTime: 100, minOpenLevels: 0, building: null, built: null, toggling: null, toggled: null, opening: null, opened: null, openLazyNode: null, closing: null, closed: null, canDrop: null, dropping: null, dropped: null, stateChanged: null }; var i; var s = null; var o = new Object; this.init = function (t, n) { r = e.extend(r, n); j(); i = t; var s = ""; if (r.dataUrl) { I(r.dataUrl, r.dataUrlJson, function (e) { s = q(e); if (!s) { alert("EasyTree: Invalid data!"); return this } C(s); return this }) } else if (r.data) { s = q(r.data); if (!s) { alert("EasyTree: Invalid data!"); return this } C(s) } else { s = q(i.html()); if (!s) { alert("EasyTree: Invalid data!"); return this } C(s) } return this }; this.options = r; this.rebuildTree = function (e) { var t = e ? q(e) : s; if (!t) { alert("EasyTree: Invalid data!") } C(t) }; this.getAllNodes = function () { return s }; this.getNode = function (e) { return y(s, e) }; this.addNode = function (e, t) { if (!t) { s.push(e); return } var n = y(s, t); if (!e) { return } if (!n.children) { n.children = [] } n.children.push(e) }; this.removeNode = function (e) { w(s, e) }; this.activateNode = function (t) { S(s); if (!r.allowActivate) { return } var n = y(s, t); if (!n) { return } n.isActive = true; e("#" + n.id).addClass("easytree-active") }; this.toggleNode = function (e) { var t = y(s, e); if (!t) { return } f(event, s, t) }; this.init(t, n) } })(jQuery)